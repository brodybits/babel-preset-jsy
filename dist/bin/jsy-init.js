#!/usr/bin/env node
'use strict';

const babel_preset_jsy_json = require('../../package.json');
const fs = require('fs');

{
  new Promise((resolve, reject) => fs.readFile('./package.json', 'utf-8', (err, content) => err ? reject(err) : resolve(content))).then(content => JSON.parse(content)).then(pkg => {
    pkg.devDependencies = setupDevDependencies(pkg.devDependencies || {});
    pkg.babel = setupBabelPresets(pkg.babel || {});
    pkg.scripts = setupScripts(pkg.scripts || {});
    return pkg;
  }).then(pkg => JSON.stringify(pkg, null, 2)).then(console.log);
}

function setupDevDependencies(devDependencies) {
  devDependencies['babel-cli'] = babel_preset_jsy_json.devDependencies['babel-cli'];
  devDependencies['babel-preset-jsy'] = `^${babel_preset_jsy_json.version}`;
  return devDependencies;
}

function setupBabelPresets(babel) {
  if (!babel.presets) {
    babel.presets = [];
  } else if ('string' === babel.presets) {
    babel.presets = [babel.presets];
  }

  if (!babel.presets.find(e => e == 'jsy' || e[0] == 'jsy')) {
    //babel.presets.push @ ['jsy', {no_stage_3: false}]
    babel.presets.push('jsy');
  }

  return babel;
}

function setupScripts(scripts) {
  if (!scripts.watch) {
    scripts.watch = 'npm -s run build -- --watch';
  }

  if (!scripts.build) {
    scripts.build = 'babel -s inline -x .js,.jsy code -d dist';
  }

  if (!scripts.testone) {
    scripts.testone = 'babel-node test/example.jsy';
  }

  return scripts;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2NvZGUvYmluL2pzeS1pbml0LmpzIl0sIm5hbWVzIjpbImJhYmVsX3ByZXNldF9qc3lfanNvbiIsInJlcXVpcmUiLCJmcyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVhZEZpbGUiLCJlcnIiLCJjb250ZW50IiwidGhlbiIsIkpTT04iLCJwYXJzZSIsInBrZyIsImRldkRlcGVuZGVuY2llcyIsInNldHVwRGV2RGVwZW5kZW5jaWVzIiwiYmFiZWwiLCJzZXR1cEJhYmVsUHJlc2V0cyIsInNjcmlwdHMiLCJzZXR1cFNjcmlwdHMiLCJzdHJpbmdpZnkiLCJjb25zb2xlIiwibG9nIiwidmVyc2lvbiIsInByZXNldHMiLCJmaW5kIiwiZSIsInB1c2giLCJ3YXRjaCIsImJ1aWxkIiwidGVzdG9uZSJdLCJtYXBwaW5ncyI6Ijs7QUFDQSxNQUFNQSx3QkFBd0JDLFFBQVEsb0JBQVIsQ0FBOUI7QUFDQSxNQUFNQyxLQUFLRCxRQUFRLElBQVIsQ0FBWDs7QUFFQTtBQUNFLE1BQUlFLE9BQUosQ0FBYyxDQUFDQyxPQUFELEVBQVVDLE1BQVYsS0FDWkgsR0FBR0ksUUFBSCxDQUFjLGdCQUFkLEVBQWdDLE9BQWhDLEVBQ0UsQ0FBQ0MsR0FBRCxFQUFNQyxPQUFOLEtBQWtCRCxNQUFNRixPQUFPRSxHQUFQLENBQU4sR0FBb0JILFFBQVFJLE9BQVIsQ0FEeEMsQ0FERixFQUlDQyxJQUpELENBSVFELFdBQVdFLEtBQUtDLEtBQUwsQ0FBYUgsT0FBYixDQUpuQixFQU1DQyxJQU5ELENBTVFHLE9BQU87QUFDYkEsUUFBSUMsZUFBSixHQUFzQkMscUJBQXVCRixJQUFJQyxlQUFKLElBQXVCLEVBQTlDLENBQXRCO0FBQ0FELFFBQUlHLEtBQUosR0FBWUMsa0JBQW9CSixJQUFJRyxLQUFKLElBQWEsRUFBakMsQ0FBWjtBQUNBSCxRQUFJSyxPQUFKLEdBQWNDLGFBQWVOLElBQUlLLE9BQUosSUFBZSxFQUE5QixDQUFkO0FBQ0EsV0FBT0wsR0FBUDtBQUFVLEdBVlosRUFZQ0gsSUFaRCxDQVlRRyxPQUFPRixLQUFLUyxTQUFMLENBQWVQLEdBQWYsRUFBb0IsSUFBcEIsRUFBMEIsQ0FBMUIsQ0FaZixFQWFDSCxJQWJELENBYVFXLFFBQVFDLEdBYmhCO0FBYW1COztBQUdyQixTQUFTUCxvQkFBVCxDQUE4QkQsZUFBOUIsRUFBK0M7QUFDN0NBLGtCQUFnQixXQUFoQixJQUErQmIsc0JBQXNCYSxlQUF0QixDQUFzQyxXQUF0QyxDQUEvQjtBQUNBQSxrQkFBZ0Isa0JBQWhCLElBQXVDLElBQUdiLHNCQUFzQnNCLE9BQVEsRUFBeEU7QUFDQSxTQUFPVCxlQUFQO0FBQXNCOztBQUd4QixTQUFTRyxpQkFBVCxDQUEyQkQsS0FBM0IsRUFBa0M7QUFDaEMsTUFBRyxDQUFFQSxNQUFNUSxPQUFYLEVBQXFCO0FBQ25CUixVQUFNUSxPQUFOLEdBQWdCLEVBQWhCO0FBQWtCLEdBRHBCLE1BRUssSUFBRyxhQUFhUixNQUFNUSxPQUF0QixFQUFnQztBQUNuQ1IsVUFBTVEsT0FBTixHQUFnQixDQUFDUixNQUFNUSxPQUFQLENBQWhCO0FBQStCOztBQUVqQyxNQUFHLENBQUVSLE1BQU1RLE9BQU4sQ0FBY0MsSUFBZCxDQUFxQkMsS0FBS0EsS0FBRyxLQUFILElBQVlBLEVBQUUsQ0FBRixLQUFNLEtBQTVDLENBQUwsRUFBeUQ7QUFDdkQ7QUFDQVYsVUFBTVEsT0FBTixDQUFjRyxJQUFkLENBQXFCLEtBQXJCO0FBQTBCOztBQUU1QixTQUFPWCxLQUFQO0FBQVk7O0FBRWQsU0FBU0csWUFBVCxDQUFzQkQsT0FBdEIsRUFBK0I7QUFDN0IsTUFBRyxDQUFDQSxRQUFRVSxLQUFaLEVBQW9CO0FBQ2xCVixZQUFRVSxLQUFSLEdBQWdCLDZCQUFoQjtBQUE2Qzs7QUFFL0MsTUFBRyxDQUFDVixRQUFRVyxLQUFaLEVBQW9CO0FBQ2xCWCxZQUFRVyxLQUFSLEdBQWdCLDBDQUFoQjtBQUEwRDs7QUFFNUQsTUFBRyxDQUFDWCxRQUFRWSxPQUFaLEVBQXNCO0FBQ3BCWixZQUFRWSxPQUFSLEdBQWtCLDZCQUFsQjtBQUErQzs7QUFFakQsU0FBT1osT0FBUDtBQUFjIiwiZmlsZSI6ImpzeS1pbml0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5jb25zdCBiYWJlbF9wcmVzZXRfanN5X2pzb24gPSByZXF1aXJlKCcuLi8uLi9wYWNrYWdlLmpzb24nKVxuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpXG5cbjo6XG4gIG5ldyBQcm9taXNlIEAgKHJlc29sdmUsIHJlamVjdCkgPT5cbiAgICBmcy5yZWFkRmlsZSBAICcuL3BhY2thZ2UuanNvbicsICd1dGYtOCcsXG4gICAgICAoZXJyLCBjb250ZW50KSA9PiBlcnIgPyByZWplY3QoZXJyKSA6IHJlc29sdmUoY29udGVudClcblxuICAudGhlbiBAIGNvbnRlbnQgPT4gSlNPTi5wYXJzZSBAIGNvbnRlbnRcblxuICAudGhlbiBAIHBrZyA9PiA6OlxuICAgIHBrZy5kZXZEZXBlbmRlbmNpZXMgPSBzZXR1cERldkRlcGVuZGVuY2llcyBAIHBrZy5kZXZEZXBlbmRlbmNpZXMgfHwge31cbiAgICBwa2cuYmFiZWwgPSBzZXR1cEJhYmVsUHJlc2V0cyBAIHBrZy5iYWJlbCB8fCB7fVxuICAgIHBrZy5zY3JpcHRzID0gc2V0dXBTY3JpcHRzIEAgcGtnLnNjcmlwdHMgfHwge31cbiAgICByZXR1cm4gcGtnXG5cbiAgLnRoZW4gQCBwa2cgPT4gSlNPTi5zdHJpbmdpZnkocGtnLCBudWxsLCAyKVxuICAudGhlbiBAIGNvbnNvbGUubG9nXG5cblxuZnVuY3Rpb24gc2V0dXBEZXZEZXBlbmRlbmNpZXMoZGV2RGVwZW5kZW5jaWVzKSA6OlxuICBkZXZEZXBlbmRlbmNpZXNbJ2JhYmVsLWNsaSddID0gYmFiZWxfcHJlc2V0X2pzeV9qc29uLmRldkRlcGVuZGVuY2llc1snYmFiZWwtY2xpJ11cbiAgZGV2RGVwZW5kZW5jaWVzWydiYWJlbC1wcmVzZXQtanN5J10gPSBgXiR7YmFiZWxfcHJlc2V0X2pzeV9qc29uLnZlcnNpb259YFxuICByZXR1cm4gZGV2RGVwZW5kZW5jaWVzXG5cblxuZnVuY3Rpb24gc2V0dXBCYWJlbFByZXNldHMoYmFiZWwpIDo6XG4gIGlmICEgYmFiZWwucHJlc2V0cyA6OlxuICAgIGJhYmVsLnByZXNldHMgPSBbXVxuICBlbHNlIGlmICdzdHJpbmcnID09PSBiYWJlbC5wcmVzZXRzIDo6XG4gICAgYmFiZWwucHJlc2V0cyA9IFtiYWJlbC5wcmVzZXRzXVxuICBcbiAgaWYgISBiYWJlbC5wcmVzZXRzLmZpbmQgQCBlID0+IGU9PSdqc3knIHx8IGVbMF09PSdqc3knIDo6XG4gICAgLy9iYWJlbC5wcmVzZXRzLnB1c2ggQCBbJ2pzeScsIHtub19zdGFnZV8zOiBmYWxzZX1dXG4gICAgYmFiZWwucHJlc2V0cy5wdXNoIEAgJ2pzeSdcblxuICByZXR1cm4gYmFiZWxcblxuZnVuY3Rpb24gc2V0dXBTY3JpcHRzKHNjcmlwdHMpIDo6XG4gIGlmICFzY3JpcHRzLndhdGNoIDo6XG4gICAgc2NyaXB0cy53YXRjaCA9ICducG0gLXMgcnVuIGJ1aWxkIC0tIC0td2F0Y2gnXG5cbiAgaWYgIXNjcmlwdHMuYnVpbGQgOjpcbiAgICBzY3JpcHRzLmJ1aWxkID0gJ2JhYmVsIC1zIGlubGluZSAteCAuanMsLmpzeSBjb2RlIC1kIGRpc3QnXG5cbiAgaWYgIXNjcmlwdHMudGVzdG9uZSA6OlxuICAgIHNjcmlwdHMudGVzdG9uZSA9ICdiYWJlbC1ub2RlIHRlc3QvZXhhbXBsZS5qc3knXG5cbiAgcmV0dXJuIHNjcmlwdHNcbiJdfQ==